/**
 * This file describes trusted programs and their connections.
 */

 use nk.base._

/**
 * Including EDL files of trusted programs.
 */
use EDL Einit
use EDL kl.core.Core
use EDL kl.rump.Dhcpcd
use EDL kl.drivers.RAMDisk
use EDL ffd.KlogEntity
use EDL kl.EntropyEntity
use EDL kl.VfsNet
use EDL kl.drivers.DNetSrv
use EDL kl.drivers.Bcm2711MboxArmToVc

request src=ffd.KlogEntity, dst=kl.core.Core {
    grant()
}

response src=kl.core.Core, dst=ffd.KlogEntity { 
    grant()
}

request src=ffd.KlogStorageEntity, dst=kl.core.Core {
    grant()
}

response src=kl.core.Core, dst=ffd.KlogStorageEntity { 
    grant()
}

// kl.core.Core
execute src = kl.core.Core, dst = kl.core.Core
{
    grant()
}

execute src = kl.core.Core, dst = Einit
{
    grant()
}

/**
 * Allows the tasks with the kl.EntropyEntity class to send requests to the KasperskyOS
 * kernel and get responses. This enables the kl.EntropyEntity program to use core
 * endpoints.
 */
request src = kl.EntropyEntity, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.EntropyEntity
{
    grant()
}



/*
 * Allows the tasks with the kl.drivers.DNetSrv class to send requests to the KasperskyOS kernel and get
 * responses. This enables the DNetSrv program to use core endpoints.
 */
request src = kl.drivers.DNetSrv, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.DNetSrv
{
    grant()
}

/*
 * Allows the tasks with the kl.drivers.Bcm2711MboxArmToVc class to send requests to the KasperskyOS kernel and get
 * responses. This enables the Bcm2711MboxArmToVc program to use core endpoints.
 */
request src = kl.drivers.Bcm2711MboxArmToVc, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.Bcm2711MboxArmToVc
{
    grant()
}


request src = kl.drivers.DNetSrv, dst = kl.drivers.Bcm2711MboxArmToVc
{
    grant()
}

response src = kl.drivers.Bcm2711MboxArmToVc, dst = kl.drivers.DNetSrv
{
    grant()
}


request src = kl.VfsNet, dst = kl.drivers.DNetSrv
{
    grant()
}

response src = kl.drivers.DNetSrv, dst = kl.VfsNet
{
    grant()
}



// Einit
execute src = Einit
{
    grant()
}

request src = Einit, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = Einit
{
    grant()
}

// kl.rump.Dhcpd
request src = kl.rump.Dhcpcd, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.rump.Dhcpcd
{
    grant()
}

// kl.drivers.RAMDisk
request src = kl.drivers.RAMDisk, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.RAMDisk
{
    grant()
}

